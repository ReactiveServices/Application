// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ReactiveServices.Application.Restoration.Tests.Specifications
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Levantamento de despachantes de trabalho que deveriam estar em execução")]
    public partial class LevantamentoDeDespachantesDeTrabalhoQueDeveriamEstarEmExecucaoFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "LevantamentoDeDespachantesDeTrabalhoQueDeveriamEstarEmExecucao.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Levantamento de despachantes de trabalho que deveriam estar em execução", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Levantamento de um despachante de trabalhos que deveria estar em execução")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("fast")]
        public virtual void LevantamentoDeUmDespachanteDeTrabalhosQueDeveriaEstarEmExecucao()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Levantamento de um despachante de trabalhos que deveria estar em execução", new string[] {
                        "stable",
                        "fast"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("que as configurações solicitem a execução de uma instância do despachante de trab" +
                    "alhos a ser identificada como despachante \'RestorationTest1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 8
 testRunner.And("que as configurações informem que o despachante \'RestorationTest1\' será capaz de " +
                    "processar até 1 solicitações de trabalho por vez", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 9
 testRunner.And("que as configurações informem que o despachante \'RestorationTest1\' será capaz de " +
                    "processar solicitações de trabalho do tipo \'Worker\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 10
 testRunner.And("que as configurações solicitem a execução de 1 solicitações de trabalho do tipo \'" +
                    "Worker\' na partida do sistema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 11
 testRunner.And("que um supervisor seja configurado para monitorar o despachante de trabalhos de i" +
                    "dentificador \'RestorationTest1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 12
 testRunner.When("o supervisor for executado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 13
 testRunner.Then("o supervisor deve colocar o despachante \'RestorationTest1\' em execução pela prime" +
                    "ira vez", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Levantamento de um despachante de trabalhos que não está mais em execução")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("slow")]
        public virtual void LevantamentoDeUmDespachanteDeTrabalhosQueNaoEstaMaisEmExecucao()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Levantamento de um despachante de trabalhos que não está mais em execução", new string[] {
                        "stable",
                        "slow"});
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("que as configurações solicitem a execução de uma instância do despachante de trab" +
                    "alhos a ser identificada como despachante \'RestorationTest2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 18
 testRunner.And("que as configurações informem que o despachante \'RestorationTest2\' será capaz de " +
                    "processar até 1 solicitações de trabalho por vez", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 19
 testRunner.And("que as configurações informem que o despachante \'RestorationTest2\' será capaz de " +
                    "processar solicitações de trabalho do tipo \'Worker\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 20
 testRunner.And("que as configurações solicitem a execução de 1 solicitações de trabalho do tipo \'" +
                    "Worker\' na partida do sistema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 21
 testRunner.And("que um supervisor seja configurado para monitorar o despachante de trabalhos de i" +
                    "dentificador \'RestorationTest2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 22
 testRunner.When("o supervisor for executado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 23
 testRunner.And("uma solicitação de encerramento de execução do tipo Kill for postada para a instâ" +
                    "ncia \'RestorationTest2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 24
 testRunner.Then("o supervisor deve colocar o despachante \'RestorationTest2\' novamente em execução", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Levantamento de um despachante de trabalhos que não está mais em execução, com um" +
            " listener")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("slow")]
        public virtual void LevantamentoDeUmDespachanteDeTrabalhosQueNaoEstaMaisEmExecucaoComUmListener()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Levantamento de um despachante de trabalhos que não está mais em execução, com um" +
                    " listener", new string[] {
                        "stable",
                        "slow"});
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("que as configurações solicitem a execução de uma instância do despachante de trab" +
                    "alhos a ser identificada como despachante \'RestorationTest3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 29
 testRunner.And("que as configurações informem que o despachante \'RestorationTest3\' será capaz de " +
                    "processar até 1 solicitações de trabalho por vez", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 30
 testRunner.And("que as configurações informem que o despachante \'RestorationTest3\' será capaz de " +
                    "processar solicitações de trabalho do tipo \'Listener\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 31
 testRunner.And("que as configurações solicitem a execução de 1 solicitações de trabalho do tipo \'" +
                    "Listener\' na partida do sistema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 32
 testRunner.And("que um supervisor seja configurado para monitorar o despachante de trabalhos de i" +
                    "dentificador \'RestorationTest3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 33
 testRunner.When("o supervisor for executado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 34
 testRunner.And("uma solicitação de encerramento de execução do tipo Kill for postada para a instâ" +
                    "ncia \'RestorationTest3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 35
 testRunner.Then("o supervisor deve colocar o despachante \'RestorationTest3\' novamente em execução", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
