// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ReactiveServices.Application.Monitoring.Tests.Specifications
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Verificação de despachantes de trabalho em execução")]
    public partial class VerificacaoDeDespachantesDeTrabalhoEmExecucaoFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "VerificacaoDeDespachantesDeTrabalhoEmExecucao.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Verificação de despachantes de trabalho em execução", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Constatação de que um despachante de trabalhos não foi inicializado")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("fast")]
        public virtual void ConstatacaoDeQueUmDespachanteDeTrabalhosNaoFoiInicializado()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Constatação de que um despachante de trabalhos não foi inicializado", new string[] {
                        "stable",
                        "fast"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("que um despachante de trabalhos de identificador \'MonitoringTest1\' não seja insta" +
                    "nciado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 8
 testRunner.And("que um supervisor seja configurado para monitorar o despachante de trabalhos de i" +
                    "dentificador \'MonitoringTest1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 9
 testRunner.When("o supervisor for executado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 10
 testRunner.Then("o supervisor deve identificar que o despachante \'MonitoringTest1\' não está em exe" +
                    "cução", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Constatação de que um despachante de trabalhos foi inicializado")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("fast")]
        public virtual void ConstatacaoDeQueUmDespachanteDeTrabalhosFoiInicializado()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Constatação de que um despachante de trabalhos foi inicializado", new string[] {
                        "stable",
                        "fast"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("que um despachante de trabalhos de identificador \'MonitoringTest2\' seja instancia" +
                    "do", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 15
 testRunner.And("que um supervisor seja configurado para monitorar o despachante de trabalhos de i" +
                    "dentificador \'MonitoringTest2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 16
 testRunner.When("o supervisor for executado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 17
 testRunner.Then("o supervisor deve identificar que o despachante \'MonitoringTest2\' está em execuçã" +
                    "o", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Constatação de que um despachante de trabalhos não está mais em execução")]
        [NUnit.Framework.CategoryAttribute("unstable")]
        [NUnit.Framework.CategoryAttribute("slow")]
        public virtual void ConstatacaoDeQueUmDespachanteDeTrabalhosNaoEstaMaisEmExecucao()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Constatação de que um despachante de trabalhos não está mais em execução", new string[] {
                        "unstable",
                        "slow"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("que um despachante de trabalhos de identificador \'MonitoringTest3\' seja instancia" +
                    "do", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 22
 testRunner.And("que um supervisor seja configurado para monitorar o despachante de trabalhos de i" +
                    "dentificador \'MonitoringTest3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 23
 testRunner.When("o supervisor for executado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 24
 testRunner.And("uma solicitação de encerramento de execução do tipo Kill for postada pelo supervi" +
                    "sor para a instância \'MonitoringTest3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 25
 testRunner.Then("o supervisor deve identificar que o despachante \'MonitoringTest3\' não está em exe" +
                    "cução", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
