// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ReactiveServices.ComputationalUnit.Dispatching.Work.Tests.Specifications
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Verificar solicitações não concluídas")]
    public partial class VerificarSolicitacoesNaoConcluidasFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "VerificarSolicitacoesNaoConcluidas.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Verificar solicitações não concluídas", @"De modo a ser capaz de enviar as solicitações de trabalho cujo processamento foi mal sucedido para uma nova tentativa de processamento
Como um despachante de trabalhos
Eu quero verificar se há solicitações de trabalho em processamento por mais tempo que o permitido", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verificar que há uma solicitação de trabalho marcada como em andamento por mais t" +
            "empo que o permitido com repetição em caso de erro")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("slow")]
        public virtual void VerificarQueHaUmaSolicitacaoDeTrabalhoMarcadaComoEmAndamentoPorMaisTempoQueOPermitidoComRepeticaoEmCasoDeErro()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verificar que há uma solicitação de trabalho marcada como em andamento por mais t" +
                    "empo que o permitido com repetição em caso de erro", new string[] {
                        "stable",
                        "slow"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.Given("que uma solicitação de trabalho tenha sido marcada com um tempo máximo de process" +
                    "amento de 8 segundos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 11
 testRunner.And("que a solicitação de trabalho aceite ser repetida caso falhe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 12
 testRunner.And("que a solicitação de trabalho precise de 4 segundos para ser concluída", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 13
 testRunner.And("que a solicitação de trabalho apresente alguma falha durante sua execução", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 14
 testRunner.And("que a solicitação de trabalho tenha sido marcada como em andamento há 24 segundos" +
                    " atrás", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 15
 testRunner.When("o despachante de trabalhos verificar a lista de trabalhos em andamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 16
 testRunner.Then("o despachante deve remover a solicitação da lista de trabalhos em andamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 17
 testRunner.And("o despachante deve republicar a solicitação de trabalho como pendente", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verificar que há uma solicitação de trabalho marcada como em andamento por mais t" +
            "empo que o permitido com repetição em caso de timeout")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("slow")]
        public virtual void VerificarQueHaUmaSolicitacaoDeTrabalhoMarcadaComoEmAndamentoPorMaisTempoQueOPermitidoComRepeticaoEmCasoDeTimeout()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verificar que há uma solicitação de trabalho marcada como em andamento por mais t" +
                    "empo que o permitido com repetição em caso de timeout", new string[] {
                        "stable",
                        "slow"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("que uma solicitação de trabalho tenha sido marcada com um tempo máximo de process" +
                    "amento de 8 segundos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 22
 testRunner.And("que a solicitação de trabalho aceite ser repetida caso falhe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 23
 testRunner.And("que a solicitação de trabalho precise de 12 segundos para ser concluída", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 24
 testRunner.And("que a solicitação de trabalho não apresente nenhuma falha durante sua execução", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 25
 testRunner.And("que a solicitação de trabalho tenha sido marcada como em andamento há 60 segundos" +
                    " atrás", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 26
 testRunner.When("o despachante de trabalhos verificar a lista de trabalhos em andamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 27
 testRunner.Then("o despachante deve remover a solicitação da lista de trabalhos em andamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 28
 testRunner.And("o despachante deve republicar a solicitação de trabalho como pendente", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verificar que há uma solicitação de trabalho marcada como em andamento por mais t" +
            "empo que o permitido com log em caso de erro")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("slow")]
        public virtual void VerificarQueHaUmaSolicitacaoDeTrabalhoMarcadaComoEmAndamentoPorMaisTempoQueOPermitidoComLogEmCasoDeErro()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verificar que há uma solicitação de trabalho marcada como em andamento por mais t" +
                    "empo que o permitido com log em caso de erro", new string[] {
                        "stable",
                        "slow"});
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("que uma solicitação de trabalho tenha sido marcada com um tempo máximo de process" +
                    "amento de 8 segundos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 33
 testRunner.And("que a solicitação de trabalho não aceite ser repetida caso falhe, tendo que ser r" +
                    "egistrada em log nesse caso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 34
 testRunner.And("que a solicitação de trabalho precise de 4 segundos para ser concluída", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 35
 testRunner.And("que a solicitação de trabalho apresente alguma falha durante sua execução", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 36
 testRunner.And("que a solicitação de trabalho tenha sido marcada como em andamento há 24 segundos" +
                    " atrás", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 37
 testRunner.When("o despachante de trabalhos verificar a lista de trabalhos em andamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 38
 testRunner.Then("o despachante deve remover a solicitação da lista de trabalhos em andamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 39
 testRunner.And("o despachante não deve republicar a solicitação de trabalho como pendente", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 40
 testRunner.And("o despachante deve registrar a falha no log de operações do despachante de trabal" +
                    "hos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verificar que há uma solicitação de trabalho marcada como em andamento por mais t" +
            "empo que o permitido com log em caso de timeout")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("slow")]
        public virtual void VerificarQueHaUmaSolicitacaoDeTrabalhoMarcadaComoEmAndamentoPorMaisTempoQueOPermitidoComLogEmCasoDeTimeout()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verificar que há uma solicitação de trabalho marcada como em andamento por mais t" +
                    "empo que o permitido com log em caso de timeout", new string[] {
                        "stable",
                        "slow"});
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given("que uma solicitação de trabalho tenha sido marcada com um tempo máximo de process" +
                    "amento de 8 segundos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 45
 testRunner.And("que a solicitação de trabalho não aceite ser repetida caso falhe, tendo que ser r" +
                    "egistrada em log nesse caso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 46
 testRunner.And("que a solicitação de trabalho precise de 12 segundos para ser concluída", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 47
 testRunner.And("que a solicitação de trabalho não apresente nenhuma falha durante sua execução", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 48
 testRunner.And("que a solicitação de trabalho tenha sido marcada como em andamento há 48 segundos" +
                    " atrás", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 49
 testRunner.When("o despachante de trabalhos verificar a lista de trabalhos em andamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 50
 testRunner.Then("o despachante deve remover a solicitação da lista de trabalhos em andamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 51
 testRunner.And("o despachante não deve republicar a solicitação de trabalho como pendente", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 52
 testRunner.And("o despachante deve registrar a falha no log de operações do despachante de trabal" +
                    "hos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verificar que há uma solicitação de trabalho marcada como em andamento por mais t" +
            "empo que o permitido e que sua execução já foi repetida diversas vezes devido a " +
            "erro")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("slow")]
        public virtual void VerificarQueHaUmaSolicitacaoDeTrabalhoMarcadaComoEmAndamentoPorMaisTempoQueOPermitidoEQueSuaExecucaoJaFoiRepetidaDiversasVezesDevidoAErro()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verificar que há uma solicitação de trabalho marcada como em andamento por mais t" +
                    "empo que o permitido e que sua execução já foi repetida diversas vezes devido a " +
                    "erro", new string[] {
                        "stable",
                        "slow"});
#line 55
this.ScenarioSetup(scenarioInfo);
#line 56
 testRunner.Given("que uma solicitação de trabalho tenha sido marcada com um tempo máximo de process" +
                    "amento de 10 segundos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 57
 testRunner.And("que no máximo 3 tentativas possam ser feitas para execução da solicitação de trab" +
                    "alho", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 58
 testRunner.And("que a solicitação de trabalho aceite ser repetida caso falhe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 59
 testRunner.And("que a solicitação de trabalho precise de 9 segundos para ser concluída", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 60
 testRunner.And("que a solicitação de trabalho apresente alguma falha durante sua execução", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 61
 testRunner.And("que a solicitação de trabalho tenha sido marcada como em andamento há 60 segundos" +
                    " atrás", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 62
 testRunner.When("o despachante de trabalhos verificar a lista de trabalhos em andamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 63
 testRunner.Then("o despachante deve remover a solicitação da lista de trabalhos em andamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 64
 testRunner.And("o despachante deve republicar a solicitação de trabalho como mal sucedida", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verificar que há uma solicitação de trabalho marcada como em andamento por mais t" +
            "empo que o permitido e que sua execução já foi repetida diversas vezes devido a " +
            "timeout")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("slow")]
        public virtual void VerificarQueHaUmaSolicitacaoDeTrabalhoMarcadaComoEmAndamentoPorMaisTempoQueOPermitidoEQueSuaExecucaoJaFoiRepetidaDiversasVezesDevidoATimeout()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verificar que há uma solicitação de trabalho marcada como em andamento por mais t" +
                    "empo que o permitido e que sua execução já foi repetida diversas vezes devido a " +
                    "timeout", new string[] {
                        "stable",
                        "slow"});
#line 67
this.ScenarioSetup(scenarioInfo);
#line 68
 testRunner.Given("que uma solicitação de trabalho tenha sido marcada com um tempo máximo de process" +
                    "amento de 10 segundos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 69
 testRunner.And("que no máximo 3 tentativas possam ser feitas para execução da solicitação de trab" +
                    "alho", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 70
 testRunner.And("que a solicitação de trabalho precise de 11 segundos para ser concluída", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 71
 testRunner.And("que a solicitação de trabalho não apresente nenhuma falha durante sua execução", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 72
 testRunner.And("que a solicitação de trabalho tenha sido marcada como em andamento há 60 segundos" +
                    " atrás", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 73
 testRunner.When("o despachante de trabalhos verificar a lista de trabalhos em andamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 74
 testRunner.Then("o despachante deve remover a solicitação da lista de trabalhos em andamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 75
 testRunner.And("o despachante deve republicar a solicitação de trabalho como mal sucedida", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
