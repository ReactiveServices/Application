// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ReactiveServices.ComputationalUnit.Dispatching.Tests.Specifications
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DespachanteDeTrabalhosComVidaUtilLimitada")]
    public partial class DespachanteDeTrabalhosComVidaUtilLimitadaFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DespachanteDeTrabalhosComVidaUtilLimitada.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "DespachanteDeTrabalhosComVidaUtilLimitada", "De modo a poder controlar por quanto tempo um despachante de trabalhos se mantém " +
                    "ativo\nComo um executor de despachante de trabalhos\nDesejo que o despachante se m" +
                    "antenha ativo de acordo com as configurações de vida útil que eu informar", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Despachante de trabalhos deve permanecer vivo continuamente")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("fast")]
        public virtual void DespachanteDeTrabalhosDevePermanecerVivoContinuamente()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Despachante de trabalhos deve permanecer vivo continuamente", new string[] {
                        "stable",
                        "fast"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.Given("que um despachante de trabalhos tenha sido configurado para se manter ativo conti" +
                    "nuamente", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 11
 testRunner.When("o despachante de trabalhos for inicializado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 12
 testRunner.And("se passarem 5 segundos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 13
 testRunner.Then("o despachante não deve ser encerrado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Despachante de trabalhos deve permanecer vivo até concluir seu primeiro trabalho")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("fast")]
        public virtual void DespachanteDeTrabalhosDevePermanecerVivoAteConcluirSeuPrimeiroTrabalho()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Despachante de trabalhos deve permanecer vivo até concluir seu primeiro trabalho", new string[] {
                        "stable",
                        "fast"});
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("que um despachante de trabalhos tenha sido configurado para se manter ativo até c" +
                    "oncluir seu primeiro trabalho com sucesso ou com falha irrecuperável", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 18
 testRunner.When("o despachante de trabalhos for inicializado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 19
 testRunner.And("que o despachante de trabalhos receba uma solicitação de trabalho com duração de " +
                    "1 segundos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 20
 testRunner.And("se passarem 5 segundos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 21
 testRunner.Then("o despachante deve ser encerrado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Despachante de trabalhos deve permanecer vivo pelo tempo máximo determinado, sem " +
            "nenhum trabalho ser recebido")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("fast")]
        public virtual void DespachanteDeTrabalhosDevePermanecerVivoPeloTempoMaximoDeterminadoSemNenhumTrabalhoSerRecebido()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Despachante de trabalhos deve permanecer vivo pelo tempo máximo determinado, sem " +
                    "nenhum trabalho ser recebido", new string[] {
                        "stable",
                        "fast"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given("que um despachante de trabalhos tenha sido configurado para se manter ativo até q" +
                    "ue 5 segundos tenham se passado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 26
 testRunner.When("o despachante de trabalhos for inicializado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 27
 testRunner.And("se passarem 10 segundos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 28
 testRunner.Then("o despachante deve ser encerrado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Despachante de trabalhos deve permanecer vivo pelo tempo máximo determinado, com " +
            "um trabalho em execução")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("slow")]
        public virtual void DespachanteDeTrabalhosDevePermanecerVivoPeloTempoMaximoDeterminadoComUmTrabalhoEmExecucao()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Despachante de trabalhos deve permanecer vivo pelo tempo máximo determinado, com " +
                    "um trabalho em execução", new string[] {
                        "stable",
                        "slow"});
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("que um despachante de trabalhos tenha sido configurado para se manter ativo até q" +
                    "ue 5 segundos tenham se passado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 33
 testRunner.When("o despachante de trabalhos for inicializado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 34
 testRunner.And("que o despachante de trabalhos receba uma solicitação de trabalho com duração de " +
                    "30 segundos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 35
 testRunner.And("se passarem 10 segundos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 36
 testRunner.Then("o despachante não deve ser encerrado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Despachante de trabalhos deve permanecer vivo pelo tempo máximo determinado, com " +
            "um trabalho já concluído")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("fast")]
        public virtual void DespachanteDeTrabalhosDevePermanecerVivoPeloTempoMaximoDeterminadoComUmTrabalhoJaConcluido()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Despachante de trabalhos deve permanecer vivo pelo tempo máximo determinado, com " +
                    "um trabalho já concluído", new string[] {
                        "stable",
                        "fast"});
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
 testRunner.Given("que um despachante de trabalhos tenha sido configurado para se manter ativo até q" +
                    "ue 5 segundos tenham se passado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 41
 testRunner.When("o despachante de trabalhos for inicializado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 42
 testRunner.And("que o despachante de trabalhos receba uma solicitação de trabalho com duração de " +
                    "1 segundos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 43
 testRunner.And("se passarem 10 segundos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 44
 testRunner.Then("o despachante deve ser encerrado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
