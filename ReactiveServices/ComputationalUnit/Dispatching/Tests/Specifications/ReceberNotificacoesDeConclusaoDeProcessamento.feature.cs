// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ReactiveServices.ComputationalUnit.Dispatching.Tests.Specifications
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Receber notificações de conclusão de processamento")]
    public partial class ReceberNotificacoesDeConclusaoDeProcessamentoFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ReceberNotificacoesDeConclusaoDeProcessamento.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Receber notificações de conclusão de processamento", @"De modo a saber se uma solicitação de trabalho enviada para processamento deve ser reenviada para uma segunda tentativa de processamento
Como um despachante de trabalhos
Eu quero receber notificações informando se o processamento foi bem sucedido, mal sucedido e deve ser repetido ou mal sucedido e deve ser logado como erro", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Receber uma notificação informando que uma solicitação de trabalho foi executada " +
            "com sucesso")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("TO_REMOVE_ConfigureAndIntializeDispatcher")]
        public virtual void ReceberUmaNotificacaoInformandoQueUmaSolicitacaoDeTrabalhoFoiExecutadaComSucesso()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Receber uma notificação informando que uma solicitação de trabalho foi executada " +
                    "com sucesso", new string[] {
                        "stable",
                        "TO_REMOVE_ConfigureAndIntializeDispatcher"});
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
 testRunner.Given("que o despachante tenha se inscrito para receber notificações de conclusão de pro" +
                    "cessamento para uma solicitação de trabalho do tipo A com identificador X", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 12
 testRunner.And("que uma solicitação de trabalho tenha sido marcada com um tempo máximo de process" +
                    "amento de 10 segundos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 13
 testRunner.And("que a solicitação de trabalho precise de 9 segundos para ser concluída", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 14
 testRunner.And("que a solicitação de trabalho tenha sido marcada como em andamento há 30 segundos" +
                    " atrás", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 15
 testRunner.When("for recebida uma notificação informando que uma solicitação de trabalho do tipo A" +
                    " com identificador X foi executada com sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 16
 testRunner.Then("o despachante deve remover a solicitação da lista de trabalhos em andamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Receber uma notificação informando que uma solicitação de trabalho foi executada " +
            "com falha e deve ser repetida")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("TO_REMOVE_ConfigureAndIntializeDispatcher")]
        public virtual void ReceberUmaNotificacaoInformandoQueUmaSolicitacaoDeTrabalhoFoiExecutadaComFalhaEDeveSerRepetida()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Receber uma notificação informando que uma solicitação de trabalho foi executada " +
                    "com falha e deve ser repetida", new string[] {
                        "stable",
                        "TO_REMOVE_ConfigureAndIntializeDispatcher"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("que o despachante tenha se inscrito para receber notificações de conclusão de pro" +
                    "cessamento para uma solicitação de trabalho do tipo A com identificador X", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 22
 testRunner.And("que uma solicitação de trabalho tenha sido marcada com um tempo máximo de process" +
                    "amento de 10 segundos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 23
 testRunner.And("que a solicitação de trabalho precise de 9 segundos para ser concluída", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 24
 testRunner.And("que a solicitação de trabalho tenha sido marcada como em andamento há 30 segundos" +
                    " atrás", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 25
 testRunner.When("for recebida uma notificação informando que uma solicitação de trabalho do tipo A" +
                    " com identificador X foi executada com falha e deve ser repetida", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 26
 testRunner.Then("o despachante deve remover a solicitação da lista de trabalhos em andamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 27
 testRunner.And("o despachante deve republicar a solicitação de trabalho como pendente", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Receber uma notificação informando que uma solicitação de trabalho foi executada " +
            "com falha e deve ser logada como erro")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("TO_REMOVE_ConfigureAndIntializeDispatcher")]
        public virtual void ReceberUmaNotificacaoInformandoQueUmaSolicitacaoDeTrabalhoFoiExecutadaComFalhaEDeveSerLogadaComoErro()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Receber uma notificação informando que uma solicitação de trabalho foi executada " +
                    "com falha e deve ser logada como erro", new string[] {
                        "stable",
                        "TO_REMOVE_ConfigureAndIntializeDispatcher"});
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("que o despachante tenha se inscrito para receber notificações de conclusão de pro" +
                    "cessamento para uma solicitação de trabalho do tipo A com identificador X", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 33
 testRunner.And("que uma solicitação de trabalho tenha sido marcada com um tempo máximo de process" +
                    "amento de 10 segundos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 34
 testRunner.And("que a solicitação de trabalho precise de 9 segundos para ser concluída", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 35
 testRunner.And("que a solicitação de trabalho tenha sido marcada como em andamento há 30 segundos" +
                    " atrás", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 36
 testRunner.When("for recebida uma notificação informando que uma solicitação de trabalho do tipo A" +
                    " com identificador X foi executada com falha e deve ser logada como erro", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 37
 testRunner.Then("o despachante deve remover a solicitação da lista de trabalhos em andamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 38
 testRunner.And("o despachante deve republicar a solicitação de trabalho como mal sucedida", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
