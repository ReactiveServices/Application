// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ReactiveServices.ComputationalUnit.Dispatching.Tests.Specifications
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Encerrar execução de trabalho")]
    public partial class EncerrarExecucaoDeTrabalhoFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EncerrarExecucaoDeTrabalho.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Encerrar execução de trabalho", "De modo a dar a resposta correta ao despachante de trabalhos\nComo um agente de ex" +
                    "ecução de trabalhos\nDesejo encerrar a execução dos trabalhos apropriadamente", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Encerrar execução de trabalho com sucesso dentro do prazo")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("fast")]
        public virtual void EncerrarExecucaoDeTrabalhoComSucessoDentroDoPrazo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Encerrar execução de trabalho com sucesso dentro do prazo", new string[] {
                        "stable",
                        "fast"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.Given("que o agente de execução esteja executando um trabalho", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 11
 testRunner.And("que nenhum erro aconteça durante a execução do trabalho", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 12
 testRunner.And("que a solicitação de execução do trabalho ainda não tenha expirado ao ser concluí" +
                    "da", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 13
 testRunner.When("a execução do trabalho for concluída", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 14
 testRunner.Then("o agente de execução deve sinalizar a operação como concluída com sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 15
 testRunner.And("o agente de execução deve publicar os eventos de conclusão da operação", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Encerrar execução de trabalho com falha que implique que a execução deva ser repe" +
            "tida")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("slow")]
        public virtual void EncerrarExecucaoDeTrabalhoComFalhaQueImpliqueQueAExecucaoDevaSerRepetida()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Encerrar execução de trabalho com falha que implique que a execução deva ser repe" +
                    "tida", new string[] {
                        "stable",
                        "slow"});
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given("que o agente de execução esteja executando um trabalho", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 20
 testRunner.And("que algum erro tenha acontecido durante a execução", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 21
 testRunner.And("que o erro ocorrido seja do tipo que implique na repetição da execução", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 22
 testRunner.And("que a solicitação de execução do trabalho ainda não tenha expirado ao ser concluí" +
                    "da", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 23
 testRunner.When("a execução do trabalho for concluída", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 24
 testRunner.Then("o agente de execução deve sinalizar a operação como concluída com falha e que dev" +
                    "a ser repetida", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 25
 testRunner.And("o agente de execução deve publicar os eventos de conclusão da operação", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Encerrar execução de trabalho com falha que implique que a execução deva ser loga" +
            "da como erro")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("fast")]
        public virtual void EncerrarExecucaoDeTrabalhoComFalhaQueImpliqueQueAExecucaoDevaSerLogadaComoErro()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Encerrar execução de trabalho com falha que implique que a execução deva ser loga" +
                    "da como erro", new string[] {
                        "stable",
                        "fast"});
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("que o agente de execução esteja executando um trabalho", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 30
 testRunner.And("que algum erro tenha acontecido durante a execução", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 31
 testRunner.And("que o erro ocorrido seja do tipo que implique no registro do erro em log, sem rep" +
                    "etição", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 32
 testRunner.And("que a solicitação de execução do trabalho ainda não tenha expirado ao ser concluí" +
                    "da", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 33
 testRunner.When("a execução do trabalho for concluída", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 34
 testRunner.Then("o agente de execução deve sinalizar a operação como concluída com falha e que dev" +
                    "a ser logada como erro", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 35
 testRunner.And("o agente de execução deve publicar os eventos de conclusão da operação", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Encerrar execução de trabalho após o prazo ter expirado")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("fast")]
        public virtual void EncerrarExecucaoDeTrabalhoAposOPrazoTerExpirado()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Encerrar execução de trabalho após o prazo ter expirado", new string[] {
                        "stable",
                        "fast"});
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.Given("que o agente de execução esteja executando um trabalho", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 40
 testRunner.And("que a solicitação de execução do trabalho já tenha expirado ao ser concluída", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 41
 testRunner.When("a execução do trabalho for concluída", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 42
 testRunner.Then("o agente de execução deve sinalizar a operação como concluída com falha e que dev" +
                    "a ser logada como erro", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 43
 testRunner.And("o agente de execução deve publicar os eventos de conclusão da operação", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
